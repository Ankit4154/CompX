<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/spring-context.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- If a Bean is defined here an object of the class gets initialized always 
		as soon as context configurations are loaded. This happens irrespective of 
		whether the bean is defined or used in the calling class. -->
	<!-- Define dependency -->
	<bean id="supportedGames" class="com.compx.GameService">
	</bean>
	<bean id="selectedProcessor" class="com.compx.IntelProcessor">
		<!-- Constructor injection -->
		<constructor-arg ref="supportedGames" />
		<!-- Setter injection -->
		<property name="name" value="Intel Processor from xml" />
	</bean>
	<bean id="ryzenProc" class="com.compx.RyzenProcessor"
		init-method="myInit" destroy-method="myDestroy" autowire="byName">
		<!-- Setter injection -->
		<property name="gameService" ref="supportedGames" />
		<property name="name" value="Ryzen Processor from xml" />
		<!-- Setting reference to Cache bean for getting values -->
		<!-- cache property being autowired as per defined bean name in xml -->
		<!-- <property name="cache" ref="cache" /> -->
	</bean>
	<bean id="intelProc" class="com.compx.IntelProcessor">
		<!-- Retrieve values from property file via Property Configure -->
		<!-- Setter injection is always called after constructor injection -->
		<property name="name" value="Intel proc from xml" />
		<!-- Constructor injection is called before setter injection -->
		<constructor-arg name="name" type="java.lang.String"
			value="${intel.processor.name}" />
		<constructor-arg name="freq" type="double" value="4.3" />
		<!-- Setting reference to Cache bean for getting values -->
		<property name="cache" ref="cache" />
		<!-- Initializing motherboard property via inner bean -->
		<property name="motherboard">
			<!-- Inner bean specific to only IntelProcessor bean -->
			<!-- bean id is not mandatorily required to be specified for inner bean -->
			<bean class="com.compx.IntelMotherboard">
				<property name="socketType" value="LGA 1151 Socket type" />
				<property name="companies">
					<util:list>
						<value>Gigabyte</value>
						<value>Asus</value>
						<value>MSI</value>
					</util:list>
				</property>
			</bean>
		</property>
	</bean>

	<!-- Generic Cache Bean, can be referenced by both/either of Ryzen or IntelProcessor 
		beans -->
	<!-- bean scope marked as prototype (instead of default - singleton) 
		to let spring container pass new cache objects for each bean call.
	-->
	<bean id="cache" class="com.compx.Cache" scope="prototype">
		<property name="L2Cache" value="2MB" />
		<property name="L3Cache" value="3MB" />
	</bean>

	<bean class="com.compx.DisplayNameBeanPostProcessor" />
	<bean class="com.compx.MyBeanFactoryPostProcessor" />
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="processorvalues.properties" />
	</bean>
</beans>