<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/spring-context.xsd">

	<!-- If a Bean is defined here an object of the class gets initialized always 
		as soon as context configurations are loaded. This happens irrespective of 
		whether the bean is defined or used in the calling class. -->
	<!-- Define dependency -->
	<bean id="supportedGames" class="com.compx.GameService" autowire="default">
	</bean>
	<bean id="selectedProcessor" class="com.compx.IntelProcessor">
		<!-- Constructor injection -->
		<constructor-arg ref="supportedGames" />
		<!-- Setter injection -->
		<property name="name" value="Intel Processor from xml" />
	</bean>
	<bean id="ryzenProc" class="com.compx.RyzenProcessor"
		init-method="myInit" destroy-method="myDestroy">
		<!-- Setter injection -->
		<property name="gameService" ref="supportedGames" />
		<property name="name" value="Ryzen Processor from xml" />
	</bean>
	<bean id="intelProc" class="com.compx.IntelProcessor">
		<!-- Retrieve values from property file via Property Configure -->
		<!-- Setter injection is always called after constructor injection -->
		<property name="name" value="Intel proc from xml" />
		<!-- Constructor injection is called before setter injection -->
		<constructor-arg name="name" type="java.lang.String" value="${intel.processor.name}" />
		<constructor-arg name="freq" type="double" value="4.3" />
		<!-- Setting reference to IntelMotherboard bean for getting values -->
		<property name="motherboard" ref="intelMotherboard" />
	</bean>
	
	<bean id="intelMotherboard" class="com.compx.IntelMotherboard">
		<property name="socketType" value="LGA 1151 Socket type" />
	</bean>
	
	<bean class="com.compx.DisplayNameBeanPostProcessor" />
	<bean class="com.compx.MyBeanFactoryPostProcessor" />
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="processorvalues.properties" />
	</bean>
</beans>